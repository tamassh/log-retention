version="2.7"
lockfile=/var/lock/subsys/retention.lock
tmpwrk=`mktemp`
sorted=`mktemp`

EXIT_USERABRT=1
EXIT_LOCKFILE=2
EXIT_FAILCOMP=4
EXIT_CONFFILE=5
EXIT_LOGCREATE=7
EXIT_MAXRETRSYNC=8
EXIT_NOTSYNCED=10
EXIT_FNF=11
GZ_ERR=3
GZ_WARN=6

declare -a xpressions=(
".*([a-zA-Z]+\.[0-9]{1,2})$"
".*([a-zA-Z]+\.[0-9]{1,2})\.gz$"
".*([a-zA-Z]+\.[0-9]{1,2})\.bz2$"
".*([a-zA-Z]+\.[0-9]{1,2})\.tar\.bz2$"
".*([a-zA-Z]+\.[0-9]{1,2})\.log\.gz$"
".*([a-zA-Z]+\.[0-9]{1,2})\.log\.bz2$"
".*([a-zA-Z]+\.[0-9]{1,2})\.log\.tar\.bz2$"
".*([a-zA-Z]+\.[0-9]{1,2})\.txt\.gz$"
".*([a-zA-Z]+\.[0-9]{1,2})\.txt\.bz2$"
".*([a-zA-Z]+\.[0-9]{1,2})\.txt\.tar\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){2}$"
".*[0-9]{4}(.{1}[0-9]{2}){2}\.gz$"
".*[0-9]{4}(.{1}[0-9]{2}){2}\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){2}\.tar\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){2}\.txt\.gz$"
".*[0-9]{4}(.{1}[0-9]{2}){2}\.txt\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){2}\.txt\.tar\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){2}\.log\.gz$"
".*[0-9]{4}(.{1}[0-9]{2}){2}\.log\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){2}\.log\.tar\.bz2$"
".*[0-9]{4}.[0-9]{1,2}.[0-9]{1,2}$"
".*[0-9]{4}.[0-9]{1,2}.[0-9]{1,2}\.gz$"
".*[0-9]{4}.[0-9]{1,2}.[0-9]{1,2}\.bz2$"
".*[0-9]{4}.[0-9]{1,2}.[0-9]{1,2}\.tar\.bz2$"
".*[0-9]{4}.[0-9]{1,2}.[0-9]{1,2}\.txt\.gz$"
".*[0-9]{4}.[0-9]{1,2}.[0-9]{1,2}\.txt\.bz2$"
".*[0-9]{4}.[0-9]{1,2}.[0-9]{1,2}\.txt\.tar\.bz2$"
".*[0-9]{4}.[0-9]{1,2}.[0-9]{1,2}\.log\.gz$"
".*[0-9]{4}.[0-9]{1,2}.[0-9]{1,2}\.log\.bz2$"
".*[0-9]{4}.[0-9]{1,2}.[0-9]{1,2}\.log\.tar\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){2}.[0-9]{1,2}$"
".*[0-9]{4}(.{1}[0-9]{2}){2}.[0-9]{1,2}\.gz$"
".*[0-9]{4}(.{1}[0-9]{2}){2}.[0-9]{1,2}\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){2}.[0-9]{1,2}\.tar\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){2}.[0-9]{1,2}\.txt\.gz$"
".*[0-9]{4}(.{1}[0-9]{2}){2}.[0-9]{1,2}\.txt\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){2}.[0-9]{1,2}\.txt\.tar\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){2}.[0-9]{1,2}\.log\.gz$"
".*[0-9]{4}(.{1}[0-9]{2}){2}.[0-9]{1,2}\.log\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){2}.[0-9]{1,2}\.log\.tar\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){5}$"
".*[0-9]{4}(.{1}[0-9]{2}){5}\.gz$"
".*[0-9]{4}(.{1}[0-9]{2}){5}\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){5}\.tar\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){5}\.txt\.gz$"
".*[0-9]{4}(.{1}[0-9]{2}){5}\.txt\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){5}\.txt\.tar\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){5}\.log\.gz$"
".*[0-9]{4}(.{1}[0-9]{2}){5}\.log\.bz2$"
".*[0-9]{4}(.{1}[0-9]{2}){5}\.log\.tar\.bz2$"
".*[a-z].*-[0-9]{4}-[0-9]{2}-[0-9]{2}$"
".*[a-z].*-[0-9]{4}-[0-9]{2}-[0-9]{2}\.bz2$"
".*UDK_COMPARISON_[0-9]{8}_[A-Z]{3}_[A-Z].*\.json$"
".*UDK_DB_QUEUE_[0-9]{8}_[A-Z]{3}_[A-Z].*\.json$"
".*UDK_DB_TXN_[0-9]{8}_[A-Z]{3}_[A-Z].*\.json$"
".*UDK_FILE_[0-9]{8}_[A-Z]{3}_[A-Z].*\.json$"
".*[0-9]{4}(.{1}[0-9]{2}){2}\.log$"
".*[0-9]{4}(.{1}[0-9]{2}){2}\.txt$"
".*[0-9]{4}(.{1}[0-9]{2}){2}\.gz$" )

function ctrl_c() {
	printf "\nCTRL+C caught : exiting [incomplete], lockfile.. \n"
	cleantmp
	echo "HOUSTON => EXIT_USERABRT (err code: $EXIT_USERABRT), lockfile present!" >> $LOG
	exit $EXIT_USERABRT
}

function lock(){
echo "function lock: start" >> $LOG
# This function checks incomplete run of the script.

if [ -f  $lockfile ];
then
	# printf "One instance of this tool seems to be running ... \n"
	# printf "Lock file => $lockfile \n"
	echo "WARN => exited with EXIT_LOCKFILE (err code: $EXIT_LOCKFILE), one instance is still running or incomplete!" >> $LOG
	cleantmp
	exit $EXIT_LOCKFILE
else
	touch $lockfile
	echo $$ > $lockfile
fi
echo "function lock: end" >> $LOG
}

function checkConf(){
echo "function checkConf: start" >> $LOG
if [ $ELIGIBLE_TO_DEL_LOCAL -gt $DAYS_TO_KEEP_LOCAL ];
then
	printf "Config file check: OK!\n"
else
	echo "WARN : ELIGIBLE_TO_DEL_LOCAL variable must be greater than DAYS_TO_KEEP_LOCAL, please adjust config file.. " >> $LOG
	exit $EXIT_CONFFILE
fi

echo "" >> $LOG 2>/dev/null
if [ $? -ne 0 ];
then
	echo "Failed to write to the log file, check permission or disk usage!" >> $LOG
	exit $EXIT_LOGCREATE
fi
echo "function checkConf: end" >> $LOG
}

function createRefFiles(){
echo "function createRefFiles: start" >> $LOG
	# this function creates an ELIGIBLE_TO_DEL_LOCAL days old file which is compared to the age of the actual file we processing
	dele=`mktemp`
	if [ $? -ne 0 ];
	then
		echo "HOUSTON Error creating temp file while creating reference file" >> $LOG
		exit $EXIT_TEMPFILE
	fi
	# this file will have the date of today's creation ..
	today=`mktemp`
	if [ $? -ne 0 ];
	then
		echo "HOUSTON Error creating temp file while creating reference file" >> $LOG
		exit $EXIT_TEMPFILE
	fi
	touch -d `date --date="$ELIGIBLE_TO_DEL_LOCAL days ago" +%Y%m%d` $dele
	echo "Original date restored."

echo "function createRefFiles: end" >> $LOG
}

function process(){
echo "function process: start" >> $LOG

while IFS='' read -r line || [[ -n "$line" ]];
do

	echo "Processing $line .. " >> $LOG
	# determine DoB of a file - this will be used to unify files (except if already in place)
	dt=`stat $line -c %y | grep -o ^[0-9]*-[0-9]*-[0-9]*`

	if [ "`echo $line | grep '^.*[a-zA-Z].*\.[0-9]\{1,2\}$'`" != "" ]; # file.1-2
	then
		mv $line ${line}-${dt}
		export line=${line}-${dt}
		std $line
		echo "Converted to standard format" >> $LOG
		continue
	fi

##### ^ 1 NF

	if [ "`echo $line | grep '^.*[a-zA-Z].*\.[0-9]\{1,2\}.gz$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[a-zA-Z].*\.[0-9]\{1,2\}.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[a-zA-Z].*\.[0-9]\{1,2\}.tar.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

##### ^ 1 form compressed

	if [ "`echo $line | grep '^.*[a-zA-Z].*\.[0-9]\{1,2\}.txt.gz$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[a-zA-Z].*\.[0-9]\{1,2\}.txt.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[a-zA-Z].*\.[0-9]\{1,2\}.txt.tar.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

##### ^ 1 form txt compressed

	if [ "`echo $line | grep '^.*[a-zA-Z].*\.[0-9]\{1,2\}.log.gz$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[a-zA-Z].*\.[0-9]\{1,2\}.log.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[a-zA-Z].*\.[0-9]\{1,2\}.log.tar.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

##### ^ 1 form log compressed

########################################################################

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}$'`"  != "" ]; #1111.11.11
	then
		std $line
		continue
	fi

##### ^ 2 NF

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.gz$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.tar.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi


##### ^ 2 form compressed

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.log.gz$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi


	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.log.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.log.tar.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

##### ^ 2 form log compressed

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.txt.gz$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.txt.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.txt.tar.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

##### ^ 2 form txt compressed
########################################################################

	if [ "`echo $line | grep '^.*[0-9]\{4\}.[0-9]\{1,2\}.[0-9]\{1,2\}$'`" != "" ]; #1111.1-2.1-2
	then
		std $line
		continue
	fi

##### ^ 3 NF

	if [ "`echo $line | grep '^.*[0-9]\{4\}.[0-9]\{1,2\}.[0-9]\{1,2\}.gz$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.[0-9]\{1,2\}.[0-9]\{1,2\}.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.[0-9]\{1,2\}.[0-9]\{1,2\}.tar.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

##### ^ 3 form compressed


	if [ "`echo $line | grep '^.*[0-9]\{4\}.[0-9]\{1,2\}.[0-9]\{1,2\}.log.gz$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.[0-9]\{1,2\}.[0-9]\{1,2\}.log.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.[0-9]\{1,2\}.[0-9]\{1,2\}.log.tar.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

##### ^ 3 form log compressed

	if [ "`echo $line | grep '^.*[0-9]\{4\}.[0-9]\{1,2\}.[0-9]\{1,2\}.txt.gz$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.[0-9]\{1,2\}.[0-9]\{1,2\}.txt.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.[0-9]\{1,2\}.[0-9]\{1,2\}.txt.tar.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

##### ^ 3 form txt compressed
########################################################################

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{1,2\}$'`" != ""  ]; # 1111.12.12.1
	then
		std $line
		continue
	fi

##### ^ 4 NF

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{1,2\}.gz$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{1,2\}.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{1,2\}.tar.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

##### ^ 4 form compressed


	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{1,2\}.log.gz$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{1,2\}.log.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{1,2\}.log.tar.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

##### ^ 4 form log compressed

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{1,2\}.txt.gz$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{1,2\}.txt.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{1,2\}.txt.tar.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi


##### ^ 4 form txt compressed
########################################################################

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}$'`" != ""  ]; # 1111.12.12.12.12.12
	then
		std $line
		continue
	fi

##### ^ 5 NF

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.gz$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.tar.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

##### ^ 5 form compressed

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.txt.gz$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.txt.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.txt.tar.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

##### ^ 5 form txt compressed

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.log.gz$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.log.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.\{1\}[0-9]\{2\}.log.tar.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

##### ^ 5 form log compressed

	if [ "`echo $line | grep '^.*[a-z].*-[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}$'`" != ""  ];
	then
		compress $line
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[a-z].*-[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}.bz2$'`" != ""  ];
	then
		oldEnough $line
		continue
	fi

##### ^ Recon logs (bureau)
########################################################################


	if [ "`echo $line | grep '^UDK_FILE_[0-9]\{8\}_[A-Z]\{3\}_[A-Z].*\.json$'`" != ""  ];
	then
		r_sync $line
		continue
	fi

	if [ "`echo $line | grep '^UDK_DB_TXN_[0-9]\{8\}_[A-Z]\{3\}_[A-Z].*\.json$'`" != ""  ];
	then
		r_sync $line
		continue
	fi

	if [ "`echo $line | grep '^UDK_DB_QUEUE_[0-9]\{8\}_[A-Z]\{3\}_[A-Z].*\.json$'`" != ""  ];
	then
		r_sync $line
		continue
	fi

	if [ "`echo $line | grep '^UDK_COMPARISON_[0-9]\{8\}_[A-Z]\{3\}_[A-Z].*\.json$'`" != ""  ];
	then
		r_sync $line
		continue
	fi

##### ^ Tomcat7 logs
########################################################################

	if [ "`echo $line | grep '^.*[0-9]\{4\}\(.\{1\}[0-9]\{2\}\)\{2\}\.gz$'`" != ""  ];
	then
		r_sync $line
		oldEnough $line
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}\(.\{1\}[0-9]\{2\}\)\{2\}\.txt$'`" != ""  ];
	then
		compress $line
		r_sync ${line}.gz
		oldEnough $line.gz
		continue
	fi

	if [ "`echo $line | grep '^.*[0-9]\{4\}\(.\{1\}[0-9]\{2\}\)\{2\}\.log$'`" != ""  ];
	then
		compress $line
		r_sync ${line}.gz
		oldEnough $line.gz
		continue
	fi

########################################################################

done < "$sorted"
echo "function process: end" >> $LOG
}

function oldEnough(){

	echo "function oldEnough: start" >> $LOG
	export thAT=$1

	r_sync $thAT

	if [ $thAT -ot $dele ]; then
		echo "Removing from localhost $thAT due to the age of file (previously it was rsynced)" >> $LOG
		echo "DEL `date +[%Y/%m/%d:%H:%M:%S]` : ${thAT}"
		rm -f $thAT
	fi

	echo "function oldEnough: end" >> $LOG
}


function std(){
echo "function std: start" >> $LOG
	# compress, store, agechk
	echo "COMPRESS `date +[%Y/%m/%d:%H:%M:%S]` : ${1}"
	compress $1


# 	As the default compress method is GZ this check is irrelevant
#
#	if [ -f $1.bz2 ]; then
#		touch -d `echo $dt | sed -e 's/-//g'` $1.bz2
#		oldEnough $1.bz2
#	fi

	if [ -f $1.gz ]; then

	echo "REST `date +[%Y/%m/%d:%H:%M:%S]` : ${1}<GZ>"
			touch -d `echo $dt | sed -e 's/-//g'` $1.gz

	echo "AGE `date +[%Y/%m/%d:%H:%M:%S]` : ${1}<GZ>"
			oldEnough $1.gz
	fi

# 	Due to the fact that GZ consumes the file on success compression
#	there's no need to sync the original file.
#	echo "STORE_ONCE `date +[%Y/%m/%d:%H:%M:%S]` : ${1}"
#	r_sync $1
	r_sync ${1}.gz

echo "function std: end" >> $LOG
}

function compress(){
echo "function compress: start" >> $LOG
	pfix=".gz" # postfix

	export param=$1

	# It is not intend to compress files from the same date ..
	if [ "`stat $param | grep Modify | awk '{print $2}'`" == "`date +%F`" ];
	then
		printf ".. LOCKED, SKIP\n"
		continue
	fi

	if [ -z "`file $param | grep compressed`" ] && [ -f $param ] && [ ! -f $1.gz ];
	then

echo "COMPRESS DEBUG MESSAGE " >> $LOG
		gzip -v -9 $param >> $LOG 2>&1
		case $? in
			[0])
				echo "function compress: gz: exit: 0 " >> $LOG
				;;
			[1])
				echo "gzip exited with exit code 1 [ERR], see logs for more detail" >> $LOG
				exit $GZ_ERR
				;;
			[2])
				echo "gzip was warning on something [WARN], see logs for more detail" >> $LOG
				# exit $GZ_WARN
				# not sure how to interpret a warning during a compression, so keep going unless see cases where this will turn fatal..
				continue
				;;
			*)	echo "FAILED: uh oh, this an unexpected error witch exit code $? .. You should NEVER see this message (out of spec)" >> $LOG
				cleantmp
				exit $EXIT_FAILCOMP   ;;
		esac
	else
		printf "File is already compressed or doesn't exist!\n"
	fi

echo "function compress: end" >> $LOG
}

function r_sync(){
echo "function r_sync: start" >> $LOG

	if [ -f $1.bz2 ]; then
		export this=$1.bz2
	fi

	if [ -f $1.gz ]; then
		export this=$1.gz
	fi

	if [ ! -z "`echo $1 | grep 'gz\|bz2'`" ]; then
		export this=$1
	fi

	if [ -z $this ]; then
		export this=$1
	fi

	echo "FILE_SYNC `date +[%Y/%m/%d:%H:%M:%S]` : ${this}"

	if [ -f ${this} ]; then
			printf "Using the following command: rsync ${RSYNC_OPTN} ${this} ${RSYNC_USER}@${RSYNC_ADDR}::${RSYNC_SCENARIO} >> ${LOG} 2>&1 \n" >> ${LOG}
			printf "DEBUG OUTPUT R_SYNC \n" >> ${LOG}
			rsync ${RSYNC_OPTN} ${this} ${RSYNC_USER}@${RSYNC_ADDR}::${RSYNC_SCENARIO} >> ${LOG} 2>&1
			# printf "DEBUG OUTPUT R_SYNC END \n" >> ${LOG}
			if [ $? -ne 0 ];
			then
				RC=1
				CN=1
				while [[ RC -ne 0 ]]
				do
						if [ $CN -gt $RSYNC_MAX_RETRY ];
						then
							echo "Exhausted to transfer file after $RSYNC_MAX_RETRY unsuccess attempt.." >> $LOG
							echo "Command used: rsync $RSYNC_OPTN ${this} $RSYNC_USER@$RSYNC_ADDR::$RSYNC_SCENARIO >/dev/null 2>&1" >> $LOG
							exit $EXIT_MAXRETRSYNC
						else
							echo "Retry $CN of $RSYNC_MAX_RETRY (with random intervals ..)" >> $LOG

						((CN++))
						fi
						sleep $(( $RANDOM / 100 ))
						rsync $RSYNC_OPTN ${this} $RSYNC_USER@$RSYNC_ADDR::$RSYNC_SCENARIO 1>>$LOG
						RC=$?
				done
			fi
		fi
		echo "SUCCESS syncing $1 to $RSYNC_ADDR on `date`" >> $LOG

echo "function r_sync: end" >> $LOG
}

function cleantmp(){
echo "function cleantmp: start" >> $LOG
# this function is to cleanup tmp file only
rm -vf $tmpwrk >> $LOG
rm -vf $sorted >> $LOG
rm -vf $dele >> $LOG
rm -vf $today >> $LOG
echo "function cleantmp: end" >> $LOG
}

function success(){
echo "function success: start" >> $LOG
printf "Cleanup "
cleantmp
rm -vf $lockfile >> $LOG
echo "$?: lock file cleanup exit code" >> $LOG
printf "complete!\n"
echo "function success: end" >> $LOG
}
